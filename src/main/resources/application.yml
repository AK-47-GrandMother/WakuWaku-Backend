spring:
  application:
    name: WakuWaku
  profiles:
    # 기본적으로 활성화 될 프로파일
    active: API-KEY,dev
    # prod로 실행 시 활성화 될 프로파일
    group:
      prod: API-KEY

  # JPA
  jpa:
    database: mysql
    properties:
      hibernate:
        format_sql: 'true'

    # 데이터 소스 초기화를 지연시키는 옵션
    # 애플리케이션 시작 시 데이터베이스 스키마 생성 및 초기 데이터 로딩을 Hibernate나 JPA가 아닌, 스프링 부트 자체의 초기화 시점까지 지연시키는 것
    # ----------------------------------------------------------------------------------------------------------
    # 데이터 소스 초기화는 애플리케이션 시작 시 데이터베이스 스키마(schema)를 생성하거나, 초기 데이터를 데이터베이스에 로드하는 과정을 말한다.
    # 예를 들어, schema.sql 파일에 데이터베이스 테이블 구조를 정의하고, data.sql 파일에 초기에 필요한 데이터를 정의할 수 있다.
    # 스프링 부트는 이러한 파일들을 자동으로 찾아서 애플리케이션 시작 시 실행한다.
    # ----------------------------------------------------------------------------------------------------------
    # 기본 동작
    # 스프링 부트에서 JPA를 사용할 경우, 기본적으로 JPA가 데이터 소스를 초기화하는 과정을 관리한다.
    # 이는 JPA가 애플리케이션 시작 시 엔티티를 스캔하여 데이터베이스 스키마를 생성하기 때문이다.
    # 그 후 스프링 부트는 schema.sql와 data.sql 파일을 실행한다.
    # 그러나, 이 순서 때문에 schema.sql이나 data.sql에 정의된 스키마 변경이 JPA에 의해 생성된 스키마와 충돌할 수 있다.
    # ----------------------------------------------------------------------------------------------------------
    # 아래와 같은 설정을 한다면, 스프링 부트는 데이터 소스의 초기화(즉, schema.sql, data.sql 실행)를 JPA의 스키마 생성 이후로 지연시킨다.
    # ----------------------------------------------------------------------------------------------------------
    # 다음과 같은 경우 유용하다:
    # - JPA를 사용하여 데이터베이스 스키마를 자동 생성하고 있으며,
    # - 애플리케이션 시작 시 data.sql을 통해 초기 데이터를 로드하고 싶은 경우.
    # ----------------------------------------------------------------------------------------------------------
    # 이 설정을 통해 스키마 생성과 초기 데이터 로딩 사이의 순서 문제를 해결할 수 있으며, 데이터베이스 관련 작업을 보다 원활하게 수행할 수 있다.
    defer-datasource-initialization: 'true'
    show-sql: 'true'


  # mvc가 인지하는 정적 파일 경로를 수정한 것
  # 아래 설정은 반드시 필요한 설정이며, spring-restdocs 의존성이 필요 없다.
  # 즉, 아래 설정은 반드시 있어야 하며, spring-restdocs 의존성이 없어도 의도대로 동작한다.
  # 하지만 테스트 코드가 없어서 그런 것일 수도 있으므로
  # spring-restdocs 의존성을 추가해야 하는 지는 지켜봐야 한다.
  # ------------ spring-restdocs 의존성을 추가해야 하는 이유 1 ----------------
  # spring-restdocs 의존성을 추가하는 이유는 테스트 코드 작성 시
  # RestDocumentationExtension.class 를 extend 할 수 있기 때문이다.
  mvc:
    static-path-pattern: /static/**

# URL에 sessionId가 표시될 때, 표시하지 않기 위함
server:
  servlet:
    session:
      tracking-modes: cookie



